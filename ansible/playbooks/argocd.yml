---
- name: Install ArgoCD on Kubernetes Cluster
  hosts: master-1
  become: true
  vars:
    argocd_namespace: argocd
    argocd_domain: argo.smartcorex.com
    argocd_version: "5.51.6"  # Latest stable ArgoCD Helm chart version
    
  tasks:
    - name: Create ArgoCD namespace
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        kubectl create namespace {{ argocd_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      register: namespace_result
      changed_when: "'created' in namespace_result.stdout"

    - name: Add ArgoCD Helm repository
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        helm repo add argo https://argoproj.github.io/argo-helm || true
        helm repo update
      register: repo_result
      changed_when: "'added' in repo_result.stdout"

    - name: Create ArgoCD Helm values file
      copy:
        content: |
          global:
            domain: {{ argocd_domain }}
          
          configs:
            params:
              server.insecure: true  # Let ALB handle TLS termination
              
          server:
            service:
              type: ClusterIP
              
            ingress:
              enabled: true
              ingressClassName: nginx
              annotations:
                nginx.ingress.kubernetes.io/ssl-redirect: "true"
                nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
                nginx.ingress.kubernetes.io/proxy-body-size: "0"
                nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
                # Let's Encrypt certificate (backup)
                cert-manager.io/cluster-issuer: letsencrypt-prod
              hosts:
                - host: {{ argocd_domain }}
                  paths:
                    - path: /
                      pathType: Prefix
              tls:
                - secretName: argocd-server-tls
                  hosts:
                    - {{ argocd_domain }}
                    
            extraArgs:
              - --insecure  # Disable internal TLS, ALB handles it
              
          dex:
            enabled: false  # Disable Dex for simplicity
            
          redis:
            enabled: true
            
          repoServer:
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
                
          controller:
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
        dest: /tmp/argocd-values.yaml
      
    - name: Install ArgoCD using Helm
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        helm upgrade --install argocd argo/argo-cd \
          --namespace {{ argocd_namespace }} \
          --version {{ argocd_version }} \
          --values /tmp/argocd-values.yaml \
          --wait --timeout 600s
      register: helm_result
      changed_when: "'installed' in helm_result.stdout or 'upgraded' in helm_result.stdout"

    - name: Wait for ArgoCD server deployment to be ready
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n {{ argocd_namespace }}
      register: deployment_wait
      retries: 3
      delay: 10

    - name: Get ArgoCD admin initial password
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        kubectl get secret argocd-initial-admin-secret -n {{ argocd_namespace }} -o jsonpath='{.data.password}' | base64 -d
      register: argocd_password_result
      retries: 3
      delay: 5
      
    - name: Set ArgoCD admin password fact
      set_fact:
        argocd_admin_password: "{{ argocd_password_result.stdout }}"

    - name: Display ArgoCD access information
      debug:
        msg:
          - "==================================="
          - "ArgoCD Installation Complete!"
          - "==================================="
          - "URL: https://{{ argocd_domain }}"
          - "Username: admin"
          - "Password: {{ argocd_admin_password | default('Check secret manually') }}"
          - "==================================="
          - ""
          - "Next Steps:"
          - "1. Update ALB target group to include ArgoCD ingress"
          - "2. Create DNS CNAME: {{ argocd_domain }} -> ALB DNS"
          - "3. Add {{ argocd_domain }} to ACM certificate"
          - "==================================="

    - name: Show ArgoCD pods status
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        kubectl get pods -n {{ argocd_namespace }}
      register: argocd_pods_result

    - name: Display ArgoCD pod status
      debug:
        msg: "{{ argocd_pods_result.stdout_lines }}"

    - name: Verify ArgoCD ingress configuration
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        kubectl describe ingress argocd-server -n {{ argocd_namespace }}
      register: argocd_ingress_result

    - name: Show ArgoCD ingress details
      debug:
        msg: "{{ argocd_ingress_result.stdout_lines }}"

    - name: Final verification commands
      debug:
        msg:
          - "==================================="
          - "Manual Verification Commands:"
          - "==================================="
          - "# Check ArgoCD pods:"
          - "kubectl get pods -n {{ argocd_namespace }}"
          - ""
          - "# Check ArgoCD ingress:"
          - "kubectl describe ingress argocd-server -n {{ argocd_namespace }}"
          - ""
          - "# Get admin password:"
          - "kubectl get secret argocd-initial-admin-secret -n {{ argocd_namespace }} -o jsonpath='{.data.password}' | base64 -d"
          - ""
          - "# Test internal access:"
          - "curl -k -H 'Host: {{ argocd_domain }}' https://localhost:30443/"
          - "==================================="
