---
- name: Install ArgoCD on Kubernetes Cluster
  hosts: master-1
  become: true
  vars:
    argocd_namespace: argocd
    argocd_domain: argo.smartcorex.com
    argocd_version: "5.51.6"  # Latest stable ArgoCD Helm chart version
    
  tasks:
    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        name: "{{ argocd_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /etc/rancher/rke2/rke2.yaml
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Add ArgoCD Helm repository
      kubernetes.core.helm_repository:
        name: argo
        repo_url: https://argoproj.github.io/argo-helm
        state: present
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Update Helm repositories
      kubernetes.core.helm:
        name: dummy
        chart_ref: argo/argo-cd
        release_namespace: "{{ argocd_namespace }}"
        state: absent
        update_repo_cache: yes
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      ignore_errors: yes

    - name: Create ArgoCD Helm values file
      copy:
        content: |
          global:
            domain: {{ argocd_domain }}
          
          configs:
            params:
              server.insecure: true  # Let ALB handle TLS termination
              
          server:
            service:
              type: ClusterIP
              
            ingress:
              enabled: true
              ingressClassName: nginx
              annotations:
                nginx.ingress.kubernetes.io/ssl-redirect: "true"
                nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
                nginx.ingress.kubernetes.io/proxy-body-size: "0"
                nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
                # Let's Encrypt certificate (backup)
                cert-manager.io/cluster-issuer: letsencrypt-prod
              hosts:
                - host: {{ argocd_domain }}
                  paths:
                    - path: /
                      pathType: Prefix
              tls:
                - secretName: argocd-server-tls
                  hosts:
                    - {{ argocd_domain }}
                    
            extraArgs:
              - --insecure  # Disable internal TLS, ALB handles it
              
          dex:
            enabled: false  # Disable Dex for simplicity
            
          redis:
            enabled: true
            
          repoServer:
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
                
          controller:
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
        dest: /tmp/argocd-values.yaml
      
    - name: Install ArgoCD using Helm
      kubernetes.core.helm:
        name: argocd
        chart_ref: argo/argo-cd
        chart_version: "{{ argocd_version }}"
        release_namespace: "{{ argocd_namespace }}"
        create_namespace: false
        values_files:
          - /tmp/argocd-values.yaml
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 600
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Wait for ArgoCD server deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: "{{ argocd_namespace }}"
        kubeconfig: /etc/rancher/rke2/rke2.yaml
        wait_condition:
          type: Available
          status: "True"
        wait_sleep: 10
        wait_timeout: 300
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Get ArgoCD admin initial password
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: argocd-initial-admin-secret
        namespace: "{{ argocd_namespace }}"
        kubeconfig: /etc/rancher/rke2/rke2.yaml
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      register: argocd_secret
      
    - name: Decode ArgoCD admin password
      set_fact:
        argocd_admin_password: "{{ argocd_secret.resources[0].data.password | b64decode }}"
      when: argocd_secret.resources | length > 0

    - name: Display ArgoCD access information
      debug:
        msg:
          - "==================================="
          - "ArgoCD Installation Complete!"
          - "==================================="
          - "URL: https://{{ argocd_domain }}"
          - "Username: admin"
          - "Password: {{ argocd_admin_password | default('Check secret manually') }}"
          - "==================================="
          - ""
          - "Next Steps:"
          - "1. Update ALB target group to include ArgoCD ingress"
          - "2. Create DNS CNAME: {{ argocd_domain }} -> ALB DNS"
          - "3. Add {{ argocd_domain }} to ACM certificate"
          - "==================================="

    - name: Show ArgoCD pods status
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ argocd_namespace }}"
        kubeconfig: /etc/rancher/rke2/rke2.yaml
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      register: argocd_pods

    - name: Display ArgoCD pod status
      debug:
        msg: "{{ item.metadata.name }}: {{ item.status.phase }}"
      loop: "{{ argocd_pods.resources }}"

    - name: Verify ArgoCD ingress configuration
      kubernetes.core.k8s_info:
        api_version: networking.k8s.io/v1
        kind: Ingress
        name: argocd-server
        namespace: "{{ argocd_namespace }}"
        kubeconfig: /etc/rancher/rke2/rke2.yaml
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      register: argocd_ingress

    - name: Show ArgoCD ingress details
      debug:
        msg:
          - "Ingress Class: {{ argocd_ingress.resources[0].spec.ingressClassName | default('Not set') }}"
          - "Host: {{ argocd_ingress.resources[0].spec.rules[0].host }}"
          - "Backend Service: {{ argocd_ingress.resources[0].spec.rules[0].http.paths[0].backend.service.name }}"

    - name: Final verification commands
      debug:
        msg:
          - "==================================="
          - "Manual Verification Commands:"
          - "==================================="
          - "# Check ArgoCD pods:"
          - "kubectl get pods -n {{ argocd_namespace }}"
          - ""
          - "# Check ArgoCD ingress:"
          - "kubectl describe ingress argocd-server -n {{ argocd_namespace }}"
          - ""
          - "# Get admin password:"
          - "kubectl get secret argocd-initial-admin-secret -n {{ argocd_namespace }} -o jsonpath='{.data.password}' | base64 -d"
          - ""
          - "# Test internal access:"
          - "curl -k -H 'Host: {{ argocd_domain }}' https://localhost:30443/"
          - "==================================="
