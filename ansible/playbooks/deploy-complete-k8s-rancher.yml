---
- name: Complete RKE2 + Rancher Deployment (Fixed Single Playbook)
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    cluster_token: ""
    rke2_version: "v1.28.15+rke2r1"
    cluster_cidr: "10.42.0.0/16"
    service_cidr: "10.43.0.0/16"
    rancher_hostname: "rancher.smartcorex.com"
    rancher_version: "2.8.5"
    letsencrypt_email: "admin@smartcorex.com"
    
  tasks:
    # ============================================================
    # PHASE 1: SYSTEM PREPARATION
    # ============================================================
    - name: "PHASE 1: System Preparation"
      debug:
        msg: "Preparing system for RKE2 installation"

    - name: Load required kernel modules
      shell: |
        modprobe br_netfilter
        modprobe overlay
      ignore_errors: true

    - name: Wait for modules to load
      pause:
        seconds: 5

    - name: Set kernel parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_file: /etc/sysctl.d/k8s.conf
        reload: false
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
      ignore_errors: true

    - name: Apply sysctl settings
      shell: sysctl --system
      ignore_errors: true

    # ============================================================
    # PHASE 2: RKE2 INSTALLATION (BASED ON WORKING 02-rke2-unified.yml)
    # ============================================================
    - name: "PHASE 2: RKE2 Installation"
      debug:
        msg: "Installing RKE2 on all nodes"

    - name: Create RKE2 directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /etc/rancher/rke2
        - /var/lib/rancher/rke2

    - name: Download and extract RKE2 binary (working method)
      shell: |
        cd /tmp
        curl -LO https://github.com/rancher/rke2/releases/download/{{ rke2_version }}/rke2.linux-amd64.tar.gz
        tar -xzf rke2.linux-amd64.tar.gz
        cp bin/rke2 /usr/local/bin/
        chmod +x /usr/local/bin/rke2
        # Also copy other required binaries if they exist
        cp bin/kubectl /usr/local/bin/ 2>/dev/null || true
        cp bin/crictl /usr/local/bin/ 2>/dev/null || true
        cp bin/ctr /usr/local/bin/ 2>/dev/null || true
        chmod +x /usr/local/bin/kubectl 2>/dev/null || true
        chmod +x /usr/local/bin/crictl 2>/dev/null || true
        chmod +x /usr/local/bin/ctr 2>/dev/null || true
      args:
        creates: /usr/local/bin/rke2
        executable: /bin/bash

    # ============================================================
    # PHASE 3: PRIMARY MASTER CONFIGURATION
    # ============================================================
    - name: Configure primary master
      block:
        - name: Generate static cluster token
          set_fact:
            static_cluster_token: "{{ 'rke2-token-' + ansible_date_time.epoch + '-' + inventory_hostname }}"

        - name: Create RKE2 server config for primary master
          copy:
            dest: /etc/rancher/rke2/config.yaml
            content: |
              token: {{ static_cluster_token }}
              cluster-cidr: {{ cluster_cidr }}
              service-cidr: {{ service_cidr }}
              tls-san:
                - {{ ansible_default_ipv4.address }}
                - {{ rancher_hostname }}
              disable:
                - rke2-ingress-nginx
            mode: '0644'

        - name: Store token for other nodes
          copy:
            content: "{{ static_cluster_token }}"
            dest: /tmp/cluster_token_static
            mode: '0600'

        - name: Create RKE2 server systemd service
          copy:
            dest: /etc/systemd/system/rke2-server.service
            content: |
              [Unit]
              Description=Rancher Kubernetes Engine v2 (server)
              Documentation=https://rancher.com/docs/rke2
              Wants=network-online.target
              After=network-online.target
              Conflicts=rke2-agent.service

              [Service]
              Type=notify
              EnvironmentFile=-/etc/default/rke2-server
              EnvironmentFile=-/etc/sysconfig/rke2-server
              EnvironmentFile=-/usr/local/lib/systemd/system/rke2-server.env
              KillMode=process
              Delegate=yes
              LimitNOFILE=1048576
              LimitNPROC=infinity
              LimitCORE=infinity
              TasksMax=infinity
              TimeoutStartSec=0
              Restart=always
              RestartSec=5s
              ExecStartPre=-/sbin/modprobe br_netfilter
              ExecStartPre=-/sbin/modprobe overlay
              ExecStart=/usr/local/bin/rke2 server

              [Install]
              WantedBy=multi-user.target
            mode: '0644'

        - name: Start primary master
          systemd:
            daemon_reload: yes
            name: rke2-server
            enabled: yes
            state: started

        - name: Wait for primary master to be ready
          wait_for:
            port: 6443
            host: "{{ ansible_default_ipv4.address }}"
            delay: 30
            timeout: 300

        - name: Setup kubectl and kubeconfig
          shell: |
            ln -sf /var/lib/rancher/rke2/bin/kubectl /usr/local/bin/kubectl
            mkdir -p ~/.kube
            cp /etc/rancher/rke2/rke2.yaml ~/.kube/config
            chmod 600 ~/.kube/config
            sed -i 's/127.0.0.1/{{ ansible_default_ipv4.address }}/g' ~/.kube/config

        - name: Install Helm
          shell: |
            export PATH=$PATH:/usr/local/bin
            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            ln -sf /usr/local/bin/helm /usr/bin/helm
          environment:
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
          args:
            creates: /usr/local/bin/helm

        - name: Read actual cluster token
          slurp:
            src: /var/lib/rancher/rke2/server/node-token
          register: node_token
          ignore_errors: yes

        - name: Store actual token
          copy:
            content: "{{ node_token.content | b64decode | trim }}"
            dest: /tmp/cluster_token
            mode: '0600'
          when: not (node_token.failed | default(false))

        - name: Create shared token file for all nodes
          copy:
            content: "{{ node_token.content | b64decode | trim }}"
            dest: /tmp/shared_cluster_token
            mode: '0644'
          when: not (node_token.failed | default(false))

      when: inventory_hostname == groups['k8s_masters'][0]

    # ============================================================
    # PHASE 4: ADDITIONAL MASTERS CONFIGURATION
    # ============================================================
    - name: Configure additional masters
      block:
        - name: Get cluster token from primary master
          slurp:
            src: /var/lib/rancher/rke2/server/node-token
          register: cluster_token_file
          delegate_to: "{{ groups['k8s_masters'][0] }}"
          ignore_errors: yes

        - name: Fallback to static token
          slurp:
            src: /tmp/cluster_token_static
          register: static_token_file
          delegate_to: "{{ groups['k8s_masters'][0] }}"
          when: cluster_token_file.failed | default(false)

        - name: Set cluster token
          set_fact:
            cluster_token: "{{ (cluster_token_file.content | b64decode | trim) if not (cluster_token_file.failed | default(false)) else (static_token_file.content | b64decode | trim) }}"

        - name: Create RKE2 server config for additional masters
          copy:
            dest: /etc/rancher/rke2/config.yaml
            content: |
              server: https://{{ hostvars[groups['k8s_masters'][0]]['ansible_default_ipv4']['address'] }}:9345
              token: {{ cluster_token }}
              cluster-cidr: {{ cluster_cidr }}
              service-cidr: {{ service_cidr }}
              tls-san:
                - {{ ansible_default_ipv4.address }}
                - {{ rancher_hostname }}
              disable:
                - rke2-ingress-nginx
            mode: '0644'

        - name: Create RKE2 server systemd service
          copy:
            dest: /etc/systemd/system/rke2-server.service
            content: |
              [Unit]
              Description=Rancher Kubernetes Engine v2 (server)
              Documentation=https://rancher.com/docs/rke2
              Wants=network-online.target
              After=network-online.target
              Conflicts=rke2-agent.service

              [Service]
              Type=notify
              EnvironmentFile=-/etc/default/rke2-server
              EnvironmentFile=-/etc/sysconfig/rke2-server
              EnvironmentFile=-/usr/local/lib/systemd/system/rke2-server.env
              KillMode=process
              Delegate=yes
              LimitNOFILE=1048576
              LimitNPROC=infinity
              LimitCORE=infinity
              TasksMax=infinity
              TimeoutStartSec=0
              Restart=always
              RestartSec=5s
              ExecStartPre=-/sbin/modprobe br_netfilter
              ExecStartPre=-/sbin/modprobe overlay
              ExecStart=/usr/local/bin/rke2 server

              [Install]
              WantedBy=multi-user.target
            mode: '0644'

        - name: Start additional masters
          systemd:
            daemon_reload: yes
            name: rke2-server
            enabled: yes
            state: started

        - name: Wait for additional masters to be ready
          wait_for:
            port: 6443
            host: "{{ ansible_default_ipv4.address }}"
            delay: 30
            timeout: 300

        - name: Setup kubectl on additional masters
          shell: |
            ln -sf /var/lib/rancher/rke2/bin/kubectl /usr/local/bin/kubectl
            mkdir -p ~/.kube
            cp /etc/rancher/rke2/rke2.yaml ~/.kube/config
            chmod 600 ~/.kube/config
            sed -i 's/127.0.0.1/{{ ansible_default_ipv4.address }}/g' ~/.kube/config

      when: inventory_hostname in groups['k8s_masters'][1:]

    # ============================================================
    # PHASE 5: WORKERS CONFIGURATION
    # ============================================================
    - name: Configure worker nodes
      block:
        - name: Get shared cluster token from primary master
          slurp:
            src: /tmp/shared_cluster_token
          register: shared_token_file
          delegate_to: "{{ groups['k8s_masters'][0] }}"
          ignore_errors: yes

        - name: Fallback to node token from primary master
          slurp:
            src: /var/lib/rancher/rke2/server/node-token
          register: cluster_token_file
          delegate_to: "{{ groups['k8s_masters'][0] }}"
          when: shared_token_file.failed | default(false)
          ignore_errors: yes

        - name: Set cluster token from available source
          set_fact:
            cluster_token: "{{ (shared_token_file.content | b64decode | trim) if not (shared_token_file.failed | default(false)) else (cluster_token_file.content | b64decode | trim) }}"

        - name: Create RKE2 agent config
          copy:
            dest: /etc/rancher/rke2/config.yaml
            content: |
              server: https://{{ hostvars[groups['k8s_masters'][0]]['ansible_default_ipv4']['address'] }}:9345
              token: {{ cluster_token }}
            mode: '0644'

        - name: Create RKE2 agent systemd service
          copy:
            dest: /etc/systemd/system/rke2-agent.service
            content: |
              [Unit]
              Description=Rancher Kubernetes Engine v2 (agent)
              Documentation=https://rancher.com/docs/rke2
              Wants=network-online.target
              After=network-online.target
              Conflicts=rke2-server.service

              [Service]
              Type=notify
              EnvironmentFile=-/etc/default/rke2-agent
              EnvironmentFile=-/etc/sysconfig/rke2-agent
              EnvironmentFile=-/usr/local/lib/systemd/system/rke2-agent.env
              KillMode=process
              Delegate=yes
              LimitNOFILE=1048576
              LimitNPROC=infinity
              LimitCORE=infinity
              TasksMax=infinity
              TimeoutStartSec=0
              Restart=always
              RestartSec=5s
              ExecStartPre=-/sbin/modprobe br_netfilter
              ExecStartPre=-/sbin/modprobe overlay
              ExecStart=/usr/local/bin/rke2 agent

              [Install]
              WantedBy=multi-user.target
            mode: '0644'

        - name: Start worker agents
          systemd:
            daemon_reload: yes
            name: rke2-agent
            enabled: yes
            state: started

        - name: Wait for agents to start (no port check needed)
          pause:
            seconds: 30

        - name: Check worker agent status and logs
          shell: |
            echo "=== RKE2 Agent Service Status ==="
            systemctl status rke2-agent --no-pager -l
            echo "=== Recent Agent Logs ==="
            journalctl -u rke2-agent --no-pager -n 10
          register: worker_status
          ignore_errors: yes

        - name: Show worker status
          debug:
            msg: "{{ worker_status.stdout_lines }}"

        - name: Restart agent if failed
          systemd:
            name: rke2-agent
            state: restarted
          when: worker_status.rc != 0
          ignore_errors: yes

      when: inventory_hostname in groups['k8s_workers']

    # ============================================================
    # PHASE 6: CLUSTER VERIFICATION AND HELM SETUP
    # ============================================================
    - name: Verify and setup cluster
      block:
        - name: Add Helm repositories
          shell: |
            helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
            helm repo add jetstack https://charts.jetstack.io
            helm repo update
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Debug kubectl availability
          shell: |
            echo "=== Checking kubectl locations ==="
            ls -la /usr/local/bin/kubectl || echo "kubectl not in /usr/local/bin/"
            ls -la /var/lib/rancher/rke2/bin/kubectl || echo "kubectl not in /var/lib/rancher/rke2/bin/"
            echo "=== PATH contents ==="
            echo $PATH
            echo "=== Attempting to create kubectl symlink ==="
            if [ -f /var/lib/rancher/rke2/bin/kubectl ]; then
              ln -sf /var/lib/rancher/rke2/bin/kubectl /usr/local/bin/kubectl
              echo "Created symlink from RKE2 bin"
            else
              echo "RKE2 kubectl not found"
            fi
            echo "=== Final kubectl check ==="
            which kubectl || echo "kubectl not in PATH"
            ls -la /usr/local/bin/kubectl || echo "kubectl symlink failed"
          register: kubectl_debug

        - name: Show kubectl debug output
          debug:
            msg: "{{ kubectl_debug.stdout_lines }}"

        - name: Verify cluster nodes and check for workers
          shell: |
            # Force use full path if symlink failed
            if [ -f /usr/local/bin/kubectl ]; then
              echo "=== Current Cluster Nodes ==="
              kubectl get nodes -o wide
              echo "=== Node Count Summary ==="
              echo "Total nodes: $(kubectl get nodes --no-headers | wc -l)"
              echo "Master nodes: $(kubectl get nodes --no-headers | grep -c 'control-plane')"
              echo "Worker nodes: $(kubectl get nodes --no-headers | grep -v 'control-plane' | wc -l)"
              echo "=== RKE2 Agent Services Status on All Nodes ==="
              kubectl get nodes --no-headers -o custom-columns=NAME:.metadata.name | while read node; do
                echo "Node: $node"
              done
            elif [ -f /var/lib/rancher/rke2/bin/kubectl ]; then
              /var/lib/rancher/rke2/bin/kubectl get nodes
            else
              echo "ERROR: kubectl not found in any location"
              exit 1
            fi
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"
          register: cluster_nodes

        - name: Show cluster status
          debug:
            msg: "{{ cluster_nodes.stdout_lines }}"

        - name: Check if worker nodes are missing and rejoin if needed
          shell: |
            WORKER_COUNT=$(kubectl get nodes --no-headers | grep -v 'control-plane' | wc -l)
            if [ "$WORKER_COUNT" -lt 3 ]; then
              echo "WARNING: Only $WORKER_COUNT worker nodes found, expected 3"
              echo "This will trigger worker node rejoin process"
              exit 1
            else
              echo "SUCCESS: All 3 worker nodes are present in cluster"
              exit 0
            fi
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"
          register: worker_check
          ignore_errors: yes

        - name: Install or upgrade cert-manager
          shell: |
            helm upgrade --install cert-manager jetstack/cert-manager \
              --namespace cert-manager \
              --create-namespace \
              --version v1.13.0 \
              --set installCRDs=true
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Wait for cert-manager to be ready
          shell: kubectl wait --for=condition=Ready pods -l app=cert-manager -n cert-manager --timeout=300s
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Wait for cert-manager webhook to be ready
          shell: kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout=300s
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Install nginx-ingress controller
          shell: |
            helm upgrade --install ingress-nginx ingress-nginx \
              --repo https://kubernetes.github.io/ingress-nginx \
              --namespace ingress-nginx \
              --create-namespace \
              --set controller.service.type=NodePort \
              --set controller.service.nodePorts.http=30080 \
              --set controller.service.nodePorts.https=30443 \
              --set controller.metrics.enabled=true \
              --set controller.config.enable-real-ip=true \
              --set controller.config.use-forwarded-headers=true \
              --set defaultBackend.enabled=true \
              --set defaultBackend.image.repository=k8s.gcr.io/defaultbackend-amd64 \
              --set defaultBackend.image.tag=1.5
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Wait for nginx-ingress to be ready
          shell: kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=ingress-nginx -n ingress-nginx --timeout=300s
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Wait for nginx-ingress admission controller to be ready
          shell: kubectl wait --for=condition=Available deployment/ingress-nginx-controller -n ingress-nginx --timeout=300s
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Create default backend for nginx-ingress health checks
          shell: |
            kubectl apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: default-backend
              namespace: ingress-nginx
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: default-backend
              template:
                metadata:
                  labels:
                    app: default-backend
                spec:
                  containers:
                  - name: default-backend
                    image: k8s.gcr.io/defaultbackend-amd64:1.5
                    ports:
                    - containerPort: 8080
                    livenessProbe:
                      httpGet:
                        port: 8080
                        path: /healthz
                    readinessProbe:
                      httpGet:
                        port: 8080
                        path: /healthz
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: default-backend
              namespace: ingress-nginx
            spec:
              ports:
              - port: 80
                targetPort: 8080
              selector:
                app: default-backend
            EOF
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Additional wait for webhook services to be fully ready
          pause:
            seconds: 30

        - name: List and disable all problematic webhooks for Rancher installation
          shell: |
            echo "=== Current ValidatingAdmissionWebhooks ==="
            kubectl get validatingwebhookconfigurations
            echo "=== Disabling nginx-ingress webhooks ==="
            kubectl delete validatingwebhookconfigurations ingress-nginx-admission --ignore-not-found=true
            kubectl delete validatingwebhookconfigurations validate.nginx.ingress.kubernetes.io --ignore-not-found=true
            echo "=== Current MutatingAdmissionWebhooks ==="
            kubectl get mutatingwebhookconfigurations
            echo "=== Disabling cert-manager webhooks temporarily ==="
            kubectl delete mutatingwebhookconfigurations cert-manager-webhook --ignore-not-found=true
            kubectl delete validatingwebhookconfigurations cert-manager-webhook --ignore-not-found=true
            echo "=== Remaining webhooks ==="
            kubectl get validatingwebhookconfigurations
            kubectl get mutatingwebhookconfigurations
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"
          ignore_errors: yes

        - name: Debug Kubernetes and Helm version detection
          shell: |
            echo "=== System Info ==="
            which kubectl
            which helm
            echo "=== Kubernetes Version Detection ==="
            kubectl version --client --output=yaml
            kubectl version --output=yaml
            echo "=== Helm Version ==="
            helm version
            echo "=== Available Rancher versions ==="
            helm search repo rancher-stable/rancher --versions | head -10
            echo "=== RKE2 Status ==="
            systemctl status rke2-server --no-pager
            echo "=== Updating Helm repositories ==="
            helm repo update
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Install Rancher with direct helm install bypassing version check
          shell: |
            # Create Rancher resources manually without webhook validation
            kubectl create namespace cattle-system --dry-run=client -o yaml | kubectl apply -f -
            
            # Direct helm install with version constraints disabled
            helm install rancher rancher-stable/rancher \
              --namespace cattle-system \
              --set hostname={{ rancher_hostname }} \
              --set bootstrapPassword=admin \
              --set ingress.tls.source=letsEncrypt \
              --set letsEncrypt.email={{ letsencrypt_email }} \
              --set letsEncrypt.ingress.class=nginx \
              --version {{ rancher_version }} \
              --disable-openapi-validation \
              --force
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Wait for Rancher pods to be created
          pause:
            seconds: 60

        - name: Re-enable webhooks by restarting services
          shell: |
            echo "=== Restarting cert-manager to restore webhooks ==="
            kubectl rollout restart deployment/cert-manager-webhook -n cert-manager || true
            echo "=== Restarting nginx-ingress to restore webhooks ==="
            kubectl rollout restart deployment/ingress-nginx-controller -n ingress-nginx || true
            echo "=== Checking webhook restoration ==="
            sleep 30
            kubectl get validatingwebhookconfigurations
            kubectl get mutatingwebhookconfigurations
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"
          ignore_errors: yes

        - name: Verify Rancher installation and track with Helm
          shell: |
            # Track the installation with Helm (without installing)
            helm upgrade --install rancher rancher-stable/rancher \
              --namespace cattle-system \
              --set hostname={{ rancher_hostname }} \
              --set bootstrapPassword=admin \
              --set ingress.tls.source=letsEncrypt \
              --set letsEncrypt.email={{ letsencrypt_email }} \
              --set letsEncrypt.ingress.class=nginx \
              --version {{ rancher_version }} \
              --dry-run=server || true
            
            # Wait for deployment to be ready
            kubectl rollout status deploy/rancher -n cattle-system --timeout=600s
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"

        - name: Get bootstrap password
          shell: kubectl get secret --namespace cattle-system bootstrap-secret -o go-template='{{.data.bootstrapPassword|base64decode}}{{"\n"}}'
          environment:
            KUBECONFIG: /etc/rancher/rke2/rke2.yaml
            PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/var/lib/rancher/rke2/bin"
          register: bootstrap_password
          ignore_errors: true

        - name: Display completion status
          debug:
            msg:
              - "=== RKE2 + Rancher Deployment Complete ==="
              - "Rancher URL: https://{{ rancher_hostname }}"
              - "Bootstrap Password: {{ bootstrap_password.stdout | default('admin') }}"
              - "ALB DNS: rancher-alb-704246084.us-east-2.elb.amazonaws.com"
              - "NodePort HTTP: 30080"
              - "NodePort HTTPS: 30443"
              - ""
              - "Next steps:"
              - "1. Register master nodes with ALB target group"
              - "2. Configure DNS to point {{ rancher_hostname }} to ALB"
              - "3. Access Rancher UI"

      when: inventory_hostname == groups['k8s_masters'][0]
