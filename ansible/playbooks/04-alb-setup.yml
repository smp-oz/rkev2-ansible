---
- name: Setup ALB Target Group for Rancher Access
  hosts: k8s_masters[0]
  become: yes
  gather_facts: yes
  vars:
    master_nodes:
      - "10.122.10.68"
      - "10.122.11.60"
      - "10.122.12.162"
    
  tasks:
    - name: Debug - Check all kube-system services and nginx resources
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        echo "=== ALL KUBE-SYSTEM SERVICES ==="
        /usr/local/bin/kubectl get svc -n kube-system
        echo ""
        echo "=== NGINX SERVICES ==="
        /usr/local/bin/kubectl get svc -n kube-system | grep -i nginx || echo "No nginx services found"
        echo ""
        echo "=== NGINX CONFIGMAPS ==="
        /usr/local/bin/kubectl get configmap -n kube-system | grep -i nginx || echo "No nginx configmaps found"
        echo ""
        echo "=== NGINX PODS ==="
        /usr/local/bin/kubectl get pods -n kube-system | grep -i nginx || echo "No nginx pods found"
        echo ""
        echo "=== ALL NODEPORT SERVICES ==="
        /usr/local/bin/kubectl get svc --all-namespaces | grep NodePort || echo "No NodePort services found"
      register: debug_output
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Display debug information
      debug:
        msg: "{{ debug_output.stdout_lines }}"

    - name: Try to find and configure any nginx ingress service
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        
        echo "=== SEARCHING FOR NGINX SERVICES ==="
        # Find any nginx service in any namespace
        nginx_svc=$(/usr/local/bin/kubectl get svc --all-namespaces | grep -i nginx | head -1)
        
        if [ -n "$nginx_svc" ]; then
          namespace=$(echo "$nginx_svc" | awk '{print $1}')
          service_name=$(echo "$nginx_svc" | awk '{print $2}')
          echo "Found nginx service: $service_name in namespace: $namespace"
          
          # Try to patch the service to NodePort
          /usr/local/bin/kubectl patch svc "$service_name" -n "$namespace" -p '{"spec":{"type":"NodePort"}}'
          echo "nginx_service_name=$service_name" > /tmp/nginx_service
          echo "nginx_namespace=$namespace" >> /tmp/nginx_service
          
          # Try to find and patch configmap
          configmap=$(/usr/local/bin/kubectl get configmap -n "$namespace" | grep -i nginx | head -1 | awk '{print $1}')
          if [ -n "$configmap" ]; then
            echo "Found configmap: $configmap"
            /usr/local/bin/kubectl patch configmap "$configmap" -n "$namespace" --patch='
            data:
              use-forwarded-headers: "true"
              compute-full-forwarded-for: "true"
              proxy-real-ip-cidr: "10.122.0.0/16"
              ssl-redirect: "true"
              server-tokens: "false"
            '
          fi
        else
          echo "No nginx services found - need to install nginx-ingress"
          echo "nginx_service_name=none" > /tmp/nginx_service
        fi
      register: nginx_config_result
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Display nginx configuration result
      debug:
        msg: "{{ nginx_config_result.stdout_lines }}"

    - name: Get nginx-ingress NodePort (if service exists)
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        
        if [ -f /tmp/nginx_service ] && grep -q "nginx_service_name=none" /tmp/nginx_service; then
          echo "No nginx service found - skipping NodePort retrieval"
          echo "0"
        else
          svc_name=$(cat /tmp/nginx_service | grep nginx_service_name | cut -d'=' -f2)
          namespace=$(cat /tmp/nginx_service | grep nginx_namespace | cut -d'=' -f2)
          echo "Getting NodePort for service: $svc_name in namespace: $namespace"
          /usr/local/bin/kubectl get svc "$svc_name" -n "$namespace" -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}' || echo "443"
        fi
      register: nginx_nodeport
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Display nginx-ingress configuration status
      debug:
        msg:
          - "=== NGINX-INGRESS ALB CONFIGURATION STATUS ==="
          - "{% if nginx_nodeport.stdout == '0' %}❌ No nginx-ingress service found{% else %}✅ Nginx-ingress configured for ALB{% endif %}"
          - "{% if nginx_nodeport.stdout != '0' %}Service type: NodePort{% endif %}"
          - "{% if nginx_nodeport.stdout != '0' %}HTTPS NodePort: {{ nginx_nodeport.stdout }}{% endif %}"
          - "{% if nginx_nodeport.stdout != '0' %}Configure ALB Target Group with:{% endif %}"
          - "{% if nginx_nodeport.stdout != '0' %}  - Protocol: HTTPS{% endif %}"
          - "{% if nginx_nodeport.stdout != '0' %}  - Port: {{ nginx_nodeport.stdout }}{% endif %}"
          - "{% if nginx_nodeport.stdout != '0' %}  - Targets: {{ master_nodes | join(', ') }}{% endif %}"
          - "{% if nginx_nodeport.stdout == '0' %}SOLUTION: Install nginx-ingress manually or use alternative ingress{% endif %}"

    - name: Create health check endpoint information
      debug:
        msg:
          - "ALB Health Check Configuration:"
          - "  - Protocol: HTTPS"
          - "  - Port: {{ nginx_nodeport.stdout }}"
          - "  - Path: /healthz"
          - "  - Success Codes: 200"
          - "  - Healthy Threshold: 2"
          - "  - Unhealthy Threshold: 2"
          - "  - Timeout: 5 seconds"
          - "  - Interval: 30 seconds"

    - name: Display AWS CLI commands for ALB setup
      debug:
        msg:
          - "Use these AWS CLI commands to configure ALB:"
          - ""
          - "# Get Target Group ARN"
          - "aws elbv2 describe-target-groups --names rancher-tg --query 'TargetGroups[0].TargetGroupArn' --output text"
          - ""
          - "# Update Target Group health check"
          - "aws elbv2 modify-target-group --target-group-arn <ARN> --health-check-protocol HTTPS --health-check-port {{ nginx_nodeport.stdout }} --health-check-path /healthz"
          - ""
          - "# Register master nodes as targets"
          - "aws elbv2 register-targets --target-group-arn <ARN> --targets {% for node in master_nodes %}Id={{ node }},Port={{ nginx_nodeport.stdout }}{% if not loop.last %} {% endif %}{% endfor %}"
          - ""
          - "# Check target health"
          - "aws elbv2 describe-target-health --target-group-arn <ARN>"

    - name: Install nginx-ingress if not found
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        
        if grep -q "nginx_service_name=none" /tmp/nginx_service; then
          echo "Installing nginx-ingress via Helm..."
          
          # Add nginx-ingress helm repo
          /usr/local/bin/helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          /usr/local/bin/helm repo update
          
          # Install nginx-ingress with NodePort
          /usr/local/bin/helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.type=NodePort \
            --set controller.service.nodePorts.https=30443 \
            --set controller.config.use-forwarded-headers=true \
            --set controller.config.compute-full-forwarded-for=true \
            --set controller.config.proxy-real-ip-cidr="10.122.0.0/16" \
            --wait --timeout=300s
          
          echo "Nginx-ingress installed successfully"
          echo "NodePort: 30443"
        else
          echo "Nginx-ingress already exists, skipping installation"
        fi
      register: nginx_install_result
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Display nginx installation result
      debug:
        msg: "{{ nginx_install_result.stdout_lines }}"

    - name: Final nginx service check
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        echo "=== FINAL NGINX SERVICE STATUS ==="
        /usr/local/bin/kubectl get svc --all-namespaces | grep -i nginx || echo "No nginx services found"
        echo ""
        echo "=== NODEPORT SERVICES ==="
        /usr/local/bin/kubectl get svc --all-namespaces | grep NodePort || echo "No NodePort services"
      register: final_check
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml

    - name: Display final service status
      debug:
        msg: "{{ final_check.stdout_lines }}"
